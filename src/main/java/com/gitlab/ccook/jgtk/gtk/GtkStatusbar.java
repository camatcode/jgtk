/*-
 * #%L
 * jgtk
 * %%
 * Copyright (C) 2022 JGTK
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
package com.gitlab.ccook.jgtk.gtk;

import com.gitlab.ccook.jgtk.GtkWidget;
import com.gitlab.ccook.jgtk.bitfields.GConnectFlags;
import com.gitlab.ccook.jgtk.callbacks.GtkCallbackFunction;
import com.gitlab.ccook.jgtk.interfaces.GtkAccessible;
import com.gitlab.ccook.jgtk.interfaces.GtkBuildable;
import com.gitlab.ccook.jgtk.interfaces.GtkConstraintTarget;
import com.gitlab.ccook.jna.GCallbackFunction;
import com.sun.jna.Native;
import com.sun.jna.Pointer;

/**
 * A GtkStatusbar widget is usually placed along the bottom of an application's main GtkWindow.
 * <p>
 * A GtkStatusBar may provide a regular commentary of the application's status (as is usually the case in a web browser,
 * for example), or may be used to simply output a message when the status changes, (when an upload is complete in an
 * FTP client, for example).
 * <p>
 * Status bars in GTK maintain a stack of messages. The message at the top of each bar's stack is the one that will
 * currently be displayed.
 * <p>
 * Any messages added to a statusbar's stack must specify a context id that is used to uniquely identify the source of
 * a message. This context id can be generated by gtk_statusbar_get_context_id(), given a message and the statusbar
 * that it will be added to. Note that messages are stored in a stack, and when choosing which message to display,
 * the stack structure is adhered to, regardless of the context identifier of a message.
 * <p>
 * One could say that a statusbar maintains one stack of messages for display purposes, but allows multiple message
 * producers to maintain substacks of the messages they produced (via context ids).
 * <p>the
 * Status bars are created using gtk_statusbar_new().
 * <p>
 * Messages are added to the bar's stack with gtk_statusbar_push().
 * <p>
 * The message at the top of the stack can be removed using gtk_statusbar_pop(). A message can be removed from anywhere
 * in the stack if its message id was recorded at the time it was added. This is done using gtk_statusbar_remove().
 *
 * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
 */
@SuppressWarnings("DeprecatedIsStillUsed")
@Deprecated
public class GtkStatusbar extends GtkWidget implements GtkAccessible, GtkBuildable, GtkConstraintTarget {

    private static final GtkStatusbarLibrary library = new GtkStatusbarLibrary();
    private final int contextId;

    /**
     * Creates a new GtkStatusbar ready for messages.
     *
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public GtkStatusbar() {
        this(library.gtk_statusbar_new());
    }

    public GtkStatusbar(Pointer ref) {
        super(ref);
        this.contextId = library.gtk_statusbar_get_context_id(ref, String.valueOf(hashCode()));
    }

    /**
     * Forces the removal of all messages from a statusbar's stack
     *
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public void clear() {
        library.gtk_statusbar_remove_all(getCReference(), contextId);
    }

    /**
     * Connect a signal
     *
     * @param s       Detailed name of signal
     * @param fn      function to invoke on signal
     * @param dataRef data to pass to the signal
     */
    public void connect(Signals s, GCallbackFunction fn, Pointer dataRef) {
        connect(s.getDetailedName(), fn, dataRef, GConnectFlags.G_CONNECT_DEFAULT);
    }

    /**
     * Connect a signal
     *
     * @param s     detailed name of signal
     * @param fn    function to invoke on signal
     * @param flags connection flags
     */
    public void connect(Signals s, GCallbackFunction fn, GConnectFlags... flags) {
        connect(s.getDetailedName(), fn, null, flags);
    }

    /**
     * Connect a signal
     *
     * @param s  detailed name of signal
     * @param fn function to invoke on signal
     */
    public void connect(Signals s, GCallbackFunction fn) {
        connect(s.getDetailedName(), fn, Pointer.NULL, GConnectFlags.G_CONNECT_DEFAULT);
    }

    /**
     * Connect a signal
     *
     * @param s       detailed name of signal
     * @param fn      function to invoke on signal
     * @param dataRef data to pass to signal
     * @param flags   connection flags
     */
    public void connect(Signals s, GCallbackFunction fn, Pointer dataRef, GConnectFlags... flags) {
        connect(new GtkCallbackFunction() {
            @Override
            public GConnectFlags[] getConnectFlag() {
                return flags;
            }

            @Override
            public Pointer getDataReference() {
                return dataRef;
            }

            @Override
            public String getDetailedSignal() {
                return s.getDetailedName();
            }

            @Override
            public void invoke(Pointer relevantThing, Pointer relevantData) {
                fn.invoke(relevantThing, relevantData);
            }
        });
    }

    /**
     * @return Internal contextId used by the stack; These bindings enforce 1 context id per status bar
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public int getContextId() {
        return contextId;
    }

    /**
     * Removes the first message in the GtkStatusbar's stack
     *
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public void pop() {
        library.gtk_statusbar_pop(getCReference(), contextId);
    }

    /**
     * Pushes a new message onto a statusbar's stack.
     *
     * @param text The message to add to the statusbar.
     * @return A message id that can be used with gtk_statusbar_remove().
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public int push(String text) {
        if (text != null) {
            return library.gtk_statusbar_push(getCReference(), contextId, text);
        }
        return -1;
    }

    /**
     * Forces the removal of a message from a statusbar's stack.
     * The exact message_id must be specified.
     *
     * @param messageId A message identifier, as returned by gtk_statusbar_push()
     * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
     */
    public void remove(int messageId) {
        if (messageId >= 0) {
            library.gtk_statusbar_remove(getCReference(), contextId, messageId);
        }
    }

    public static final class Signals extends GtkWidget.Signals {
        /**
         * Emitted whenever a new message is popped off a statusbar's stack.
         */
        public static final Signals TEXT_POPPED = new Signals("text-popped");

        /**
         * Emitted whenever a new message gets pushed onto a statusbar's stack.
         */
        public static final Signals TEXT_PUSHED = new Signals("text-pushed");

        private Signals(String detailedName) {
            super(detailedName);
        }
    }

    protected static class GtkStatusbarLibrary extends GtkWidgetLibrary {
        static {
            Native.register("gtk-4");
        }


        /**
         * Returns a new context identifier, given a description of the actual context.
         * <p>
         * Note that the description is not shown in the UI.
         *
         * @param statusbar           self
         * @param context_description Textual description of what context the new message is being used in.
         * @return An integer id.
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native int gtk_statusbar_get_context_id(Pointer statusbar, String context_description);

        /**
         * Creates a new GtkStatusbar ready for messages.
         *
         * @return The new GtkStatusbar
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native Pointer gtk_statusbar_new();

        /**
         * Removes the first message in the GtkStatusbar's stack with the given context id.
         * <p>
         * Note that this may not change the displayed message, if the message at the top of the stack has a different
         * context id.
         *
         * @param statusbar  self
         * @param context_id A context identifier.
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native void gtk_statusbar_pop(Pointer statusbar, int context_id);

        /**
         * Pushes a new message onto a statusbar's stack.
         *
         * @param statusbar  self
         * @param context_id The message's context id, as returned by gtk_statusbar_get_context_id()
         * @param text       The message to add to the statusbar.
         * @return A message id that can be used with gtk_statusbar_remove().
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native int gtk_statusbar_push(Pointer statusbar, int context_id, String text);

        /**
         * Forces the removal of a message from a statusbar's stack.
         * The exact context_id and message_id must be specified.
         *
         * @param statusbar  self
         * @param context_id A context identifier.
         * @param message_id A message identifier, as returned by gtk_statusbar_push()
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native void gtk_statusbar_remove(Pointer statusbar, int context_id, int message_id);

        /**
         * Forces the removal of all messages from a statusbar's stack with the exact context_id.
         *
         * @param statusbar  self
         * @param context_id A context identifier.
         * @deprecated Deprecated since: 4.10. This widget will be removed in GTK 5
         */
        public native void gtk_statusbar_remove_all(Pointer statusbar, int context_id);
    }
}
